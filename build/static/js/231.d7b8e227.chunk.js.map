{"version":3,"file":"static/js/231.d7b8e227.chunk.js","mappings":"qVAUe,SAASA,IACpB,IAAMC,EAAM,uCACNC,GAAWC,EAAAA,EAAAA,MACjB,GAA6BC,EAAAA,EAAAA,UAAS,IAAtC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAiCF,EAAAA,EAAAA,WAAS,GAA1C,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA2CJ,EAAAA,EAAAA,eAASK,GAApD,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,EAAe,CACjBC,SAAU,eACVC,UAAW,IACXC,cAAc,EACdC,WAAW,EACXC,MAAO,SAGXC,EAAAA,EAAAA,YAAW,WAAM,8CACb,mFACIC,aAAaC,QAAQ,gBACrBlB,EAAS,UAFb,4CADa,uBAAC,WAAD,wBAMfmB,EACD,GAAC,IAEF,IAAMC,EAAiB,yCAAG,qGACFb,IAAjBC,EADmB,gBAElBa,EAAAA,GAAAA,MAAY,0BAA0BX,GAFpB,gDAKCY,KAAKC,MAAMN,aAAaC,QAAQ,gBALjC,cAKZM,EALY,iBAMGC,IAAAA,KAAA,UAAcC,EAAAA,GAAd,YAAgCF,EAAKG,KAAM,CAG5DC,MAAMzB,EAAQK,KATA,kBAMXqB,EANW,EAMXA,MAQHC,OAGJN,EAAKO,kBAAmB,EACxBP,EAAKQ,YAAcH,EAAKD,MAExBX,aAAagB,QAAQ,cAAcX,KAAKY,UAAUV,IAClDxB,EAAS,MAETqB,EAAAA,GAAAA,MAAY,wCAAwCX,GAvBlC,kDA0BlBW,EAAAA,GAAAA,MAAA,MA1BkB,0DAAH,qDAiDvB,OAnBKL,EAAAA,EAAAA,YAAW,WAAM,8CACd,+FACOa,EAAO,GACLM,EAAE,EAFX,YAEaA,EAAE,GAFf,0CAIyBV,IAAAA,IAAA,UAAa1B,EAAb,YAAoBqC,KAAKC,MAAoB,IAAdD,KAAKE,YAJ7D,OAIWV,EAJX,OAKWW,EAAS,IAAIC,EAAAA,GAAOZ,EAAMC,MAChCA,EAAKY,KAAKF,EAAOG,SAAS,WAN/B,kDAQQC,QAAQC,IAAR,MARR,QAEiBT,IAFjB,uBAYC/B,EAAWyB,GACXvB,GAAa,GAbd,2DADc,uBAAC,WAAD,wBAgBduC,EACF,GAAC,KAGP,gCAEKxC,GAAY,SAACyC,EAAD,WACT,gBAAKC,IAAKC,EAAQC,IAAI,SAASC,UAAU,cAG7C,UAACJ,EAAD,YACI,gBAAKI,UAAU,kBAAf,UACI,sEAEJ,gBAAKA,UAAU,UAAf,SAEQ/C,EAAQgD,KAAI,SAACC,EAAOC,GAChB,OAEI,gBAAiBH,UAAS,iBAAY1C,IAAmB6C,EAAO,WAAW,IAA3E,UACI,gBAAKN,IAAG,oCAA+BK,GAAUH,IAAI,SACrDK,QAAS,kBAAM7C,EAAkB4C,EAAxB,KAFHA,EAKjB,OAGT,mBAAQH,UAAU,aAAaI,QAASlC,EAAxC,wCAIJ,SAAC,KAAD,MAGP,CAED,IAAM0B,EAAYS,EAAAA,GAAAA,IAAH,ilC,wPClHR,IACMC,EAAI,2BADG,MAEPC,EAAU,UAAMD,EAAN,mBACVE,EAAa,UAAMF,EAAN,sBACb9B,EAAc,UAAM8B,EAAN,uBACdG,EAAa,UAAMH,EAAN,sBACbI,EAAgB,UAAMJ,EAAN,wBAChBK,EAAmB,UAAML,EAAN,wBACnBM,EAAkB,UAAMN,EAAN,2BAClBO,EAAkB,UAAMP,EAAN,0B","sources":["pages/SetAvatar.jsx","utils/APIRoutes.js"],"sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from \"styled-components\";\r\nimport loader from \"../assets/loader.gif\"\r\nimport {ToastContainer,toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { setAvatarRoute } from '../utils/APIRoutes';\r\nimport { Buffer } from 'buffer';\r\n\r\nexport default function SetAvatar(){\r\n    const api = 'https://api.multiavatar.com/45678945';//generates randomn avatar its open source\r\n    const navigate = useNavigate();\r\n    const [avatars,setAvatars] = useState([]);\r\n    const [isLoading,setIsLoading] = useState(true);\r\n    const [selectedAvatar,setSelectedAvatar] = useState(undefined);\r\n    const toastOptions = {\r\n        position: \"bottom-right\",\r\n        autoClose: 8000,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"dark\",\r\n    };\r\n\r\n    useEffect( () => {\r\n        async function chat12(){\r\n        if(!localStorage.getItem('snappy-user')){//If user hasnt already logged-in before\r\n            navigate('/login')\r\n        }\r\n      }\r\n      chat12();\r\n    },[]);\r\n\r\n    const setProfilePicture = async () =>{\r\n        if(selectedAvatar===undefined){\r\n            toast.error(\"Please Select an avatar\",toastOptions)\r\n        } else{\r\n            try{\r\n            const user = await JSON.parse(localStorage.getItem(\"snappy-user\"));\r\n            const {data} = await axios.post(`${setAvatarRoute}/${user._id}`,{\r\n                //selectedAvatar state contains the index of the avatar which user selected\r\n                //set image as the image at the index selectedAvatar in avatars array\r\n                image:avatars[selectedAvatar],\r\n            })\r\n            //console.log(avatars[selectedAvatar]); \r\n        \r\n        //If isSet true in the data which which we got from the backend \r\n        if(data.isSet){\r\n        //Then set isAvatarImageSet to true and avatarImage to image which we got from backend(that is send by backend)\r\n            //of the user\r\n            user.isAvatarImageSet = true;\r\n            user.avatarImage = data.image;\r\n            //setIrtem and avigate to home page\r\n            localStorage.setItem('snappy-user',JSON.stringify(user));\r\n            navigate(\"/\");\r\n        }else{\r\n            toast.error(\"Error setting avatar.Please try again\",toastOptions);\r\n        }\r\n        }catch(er){\r\n            toast.error(er);\r\n        }\r\n    }\r\n    }\r\n         useEffect( () => {\r\n            async function check(){//made the function as we cant use async in useeffect so \r\n             const data = [];\r\n             for(let i=0;i<4;i++){//for each loop doesnt work for api so we use for loop manually'\r\n                try{\r\n                 const image = await axios.get(`${api}/${Math.round(Math.random()*1000)}`);//will generate random images\r\n                 const buffer = new Buffer(image.data);\r\n                 data.push(buffer.toString(\"base64\"));\r\n                } catch(er){\r\n                    console.log(er);\r\n                }\r\n             };\r\n             //provide data array in the avatars state //now avatar state contains array of the images\r\n             setAvatars(data);\r\n             setIsLoading(false);\r\n            }\r\n            check();\r\n         },[]);\r\n    //}\r\n    return (\r\n    <>\r\n    {//if isloading is true show loader\r\n         isLoading ? <Container> \r\n            <img src={loader} alt=\"loader\" className='loader' />\r\n        </Container> : (\r\n            //else shoe this\r\n        <Container>\r\n            <div className=\"title-container\">\r\n                <h1>Pick an avatar as your profile picture</h1>\r\n            </div>\r\n            <div className=\"avatars\">\r\n                {\r\n                    avatars.map((avatar,index)=>{\r\n                        return (\r\n                           //key={index}\r\n                            <div key={index} className={`avatar ${selectedAvatar === index ?\"selected\":\"\"}`}>\r\n                                <img src={`data:image/svg+xml;base64,${avatar}`} alt=\"avatar\" \r\n                                onClick={() => setSelectedAvatar(index)}/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <button className='submit-btn' onClick={setProfilePicture}>Set as Profile Picture</button>\r\n        </Container>\r\n    )\r\n        }\r\n        <ToastContainer />\r\n    </>\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    flex-direction:column;\r\n    gap: 3rem;\r\n    background-color:#131324;\r\n    height:100vh;\r\n    .loader{\r\n        max-inline-size: 100%;\r\n    }\r\n    .title-container{\r\n        h1{\r\n            color:white;\r\n        }\r\n    }\r\n    .avatars{\r\n        display:flex;\r\n        gap:2rem;\r\n        .avatar{\r\n            border:0.4rem solid transparent;\r\n            padding:0.4rem;\r\n            border-radius:5rem;\r\n            dislay:flex;\r\n            justify-content:center;\r\n            align-items:center;\r\n            transition:0.5s ease-in-out;\r\n            img{\r\n                height:6rem;\r\n            }\r\n        }\r\n        .selected{\r\n            border: 0.4rem solid #4e0eff\r\n        }\r\n    }\r\n    .submit-btn{\r\n    background-color: #4e0eff;\r\n     color: white;\r\n     padding: 1rem 2rem;\r\n     border: none;\r\n     font-weight: bold;\r\n     cursor: pointer;\r\n     border-radius: 0.4rem;\r\n     font-size: 1rem;\r\n     text-transform: uppercase;\r\n     &:hover {\r\n       background-color: #4e0eff;\r\n    }\r\n`","//host is backend address\r\nexport const port = 5001;\r\nexport const host = `http://localhost:${port}`;\r\nexport const loginRoute = `${host}/api/auth/login`;\r\nexport const registerRoute = `${host}/api/auth/register`;\r\nexport const setAvatarRoute = `${host}/api/auth/setavatar`;\r\nexport const allUsersRoute = `${host}/api/auth/allusers`;\r\nexport const sendMessageRoute = `${host}/api/messages/addmsg`; \r\nexport const getAllMessagesRoute = `${host}/api/messages/getmsg`;   \r\nexport const firebaseLoginRoute = `${host}/api/auth/firebaselogin`;\r\nexport const checkUsernameRoute = `${host}/api/auth/checkusername`;"],"names":["SetAvatar","api","navigate","useNavigate","useState","avatars","setAvatars","isLoading","setIsLoading","undefined","selectedAvatar","setSelectedAvatar","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","localStorage","getItem","chat12","setProfilePicture","toast","JSON","parse","user","axios","setAvatarRoute","_id","image","data","isSet","isAvatarImageSet","avatarImage","setItem","stringify","i","Math","round","random","buffer","Buffer","push","toString","console","log","check","Container","src","loader","alt","className","map","avatar","index","onClick","styled","host","loginRoute","registerRoute","allUsersRoute","sendMessageRoute","getAllMessagesRoute","firebaseLoginRoute","checkUsernameRoute"],"sourceRoot":""}