{"version":3,"file":"static/js/285.f736baff.chunk.js","mappings":"iSA+GA,IAAMA,EAAgBC,EAAAA,GAAAA,IAAH,+0CAoEnB,UAzKA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,EAAe,CACnBC,SAAU,eACVC,UAAW,IACXC,cAAc,EACdC,WAAW,EACXC,MAAO,QAET,GAA4BC,EAAAA,EAAAA,UAAS,CACnCC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,gBAAiB,KAJnB,eAAOC,EAAP,KAAeC,EAAf,MAMEC,EAAAA,EAAAA,YAAU,WACLC,aAAaC,QAAQ,gBAClBjB,EAAS,IAEhB,GAAC,IACF,IAAMkB,EAAe,SAACC,GACpBL,GAAU,kBAAKD,GAAN,cAAeM,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,QAC1D,EACKC,EAAmB,WAGvB,IAAQZ,EAA+CE,EAA/CF,SAAUC,EAAqCC,EAArCD,gBAAiBH,EAAoBI,EAApBJ,SAAUC,EAAUG,EAAVH,MAC7C,OAAIC,IAAaC,GACfY,EAAAA,GAAAA,MACE,gDACAtB,IAEK,GACEO,EAASgB,OAAS,GAC3BD,EAAAA,GAAAA,MACE,gDACAtB,IAEK,GACES,EAASc,OAAS,GAC3BD,EAAAA,GAAAA,MACE,yDACAtB,IAEK,GACY,KAAVQ,IACTc,EAAAA,GAAAA,MAAY,qBAAsBtB,IAC3B,EAGV,EAEKwB,EAAY,yCAAG,WAAOP,GAAP,uFACjBA,EAAMQ,kBAEHJ,IAHc,wBAKRZ,EAA2BE,EAA3BF,SAASF,EAAkBI,EAAlBJ,SAASC,EAASG,EAATH,MALV,kBAQUkB,IAAAA,KAAWC,EAAAA,GAAc,CAE5CpB,SAAAA,EACAC,MAAAA,EACAC,SAAAA,IAZS,iBAcM,KANVmB,EARI,EAQJA,MAMCC,QACNP,EAAAA,GAAAA,MAAYM,EAAKE,IAAK9B,IAEP,IAAd4B,EAAKC,SACNf,aAAaiB,QAAQ,cAAcC,KAAKC,UAAUL,EAAKM,OACvDpC,EAAS,MAnBA,kDAsBXwB,EAAAA,GAAAA,MAAA,KAAiBtB,GAtBN,kEAAH,sDA2BhB,OACE,iCACI,SAACJ,EAAD,WACI,kBAAMuC,SAAU,SAAClB,GAAD,OAASO,EAAaP,EAAtB,EAAhB,WACI,iBAAKmB,UAAU,QAAf,WACI,gBAAKC,IAAKC,EAAAA,EAAMC,IAAI,UACpB,uCAEJ,kBAAOC,KAAK,OAAOC,YAAY,WAAWtB,KAAK,WAAWuB,SAAU,SAACC,GAAD,OAAK3B,EAAa2B,EAAlB,KACpE,kBAAOH,KAAK,QAAQC,YAAY,QAAQtB,KAAK,QAAQuB,SAAU,SAACC,GAAD,OAAK3B,EAAa2B,EAAlB,KAC/D,kBAAOH,KAAK,WAAWC,YAAY,WAAWtB,KAAK,WAAWuB,SAAU,SAACC,GAAD,OAAK3B,EAAa2B,EAAlB,KACxE,kBAAOH,KAAK,WAAWC,YAAY,mBAAmBtB,KAAK,kBAAkBuB,SAAU,SAACC,GAAD,OAAK3B,EAAa2B,EAAlB,KACvF,mBAAQH,KAAK,SAASJ,UAAU,MAAhC,0BACA,SAAC,IAAD,KACA,0DAAgC,SAAC,KAAD,CAAMQ,GAAG,SAAT,4BAGxC,SAAC,KAAD,MAGX,C","sources":["pages/Register.jsx"],"sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport styled from \"styled-components\";\r\nimport Logo from \"../assets/logo.svg\"\r\nimport {ToastContainer,toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { registerRoute } from '../utils/APIRoutes';\r\nimport SocialLoginButtons from '../components/SocialLoginButtons';\r\n\r\nfunction Register(){\r\n  const navigate = useNavigate();\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n  const [values, setValues] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n    useEffect(()=> {\r\n      if(localStorage.getItem('snappy-user')){\r\n            navigate(\"/\")\r\n      }\r\n    },[]);\r\n    const handleChange = (event) => {\r\n      setValues({ ...values, [event.target.name]: event.target.value });\r\n    };\r\n    const handleValidation = () => {\r\n      //We have destructured this values from state \"values\" \r\n      // and will see all validations\r\n      const { password, confirmPassword, username, email } = values;\r\n      if (password !== confirmPassword) {\r\n        toast.error(\r\n          \"Password and confirm password should be same.\",\r\n          toastOptions\r\n        );\r\n        return false;\r\n      } else if (username.length < 3) {\r\n        toast.error(\r\n          \"Username should be greater than 3 characters.\",\r\n          toastOptions\r\n        );\r\n        return false;\r\n      } else if (password.length < 8) {\r\n        toast.error(\r\n          \"Password should be equal or greater than 8 characters.\",\r\n          toastOptions\r\n        );\r\n        return false;\r\n      } else if (email === \"\") {\r\n        toast.error(\"Email is required.\", toastOptions);\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    const handleSubmit = async (event)=>{\r\n        event.preventDefault();\r\n        //If validation returns true i.e., all fields filled correctly \r\n        if(handleValidation()){\r\n          //We destructured password,username,email\r\n          const {password,username,email} = values;\r\n            try{\r\n              //get the response which we got when we post registerRoute and provide details to backend\r\n              const {data} = await axios.post(registerRoute,{//pass data as obeject i.e., {data}\r\n                //otherwise we can write data.data.status instead of data.status\r\n                username,\r\n                email,\r\n                password,\r\n              });\r\n              if(data.status===false){\r\n                toast.error(data.msg, toastOptions);\r\n              }\r\n              if(data.status===true){\r\n                localStorage.setItem('snappy-user',JSON.stringify(data.user))\r\n                navigate(\"/\");\r\n              }\r\n            }catch(err){\r\n              toast.error(err, toastOptions);\r\n            }\r\n        };\r\n    };\r\n\r\n      return (\r\n        <>\r\n            <FormContainer>\r\n                <form onSubmit={(event)=>handleSubmit(event)}>\r\n                    <div className=\"brand\">\r\n                        <img src={Logo} alt=\"Logo\" />\r\n                        <h1>snappy</h1>\r\n                    </div>\r\n                    <input type=\"text\" placeholder='Username' name=\"username\" onChange={(e)=>handleChange(e)}  />\r\n                    <input type=\"email\" placeholder='Email' name=\"email\" onChange={(e)=>handleChange(e)}  />\r\n                    <input type=\"password\" placeholder='Password' name=\"password\" onChange={(e)=>handleChange(e)}  />\r\n                    <input type=\"password\" placeholder='Confirm Password' name=\"confirmPassword\" onChange={(e)=>handleChange(e)}  />\r\n                    <button type='submit' className='btn'>Create User</button>\r\n                    <SocialLoginButtons />\r\n                    <span>Already have an account ? <Link to=\"/login\">Login</Link></span>\r\n                </form>\r\n            </FormContainer>\r\n            <ToastContainer />\r\n        </>\r\n      )\r\n}\r\n\r\nconst FormContainer = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  background-color: #131324;\r\n  .brand {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    justify-content: center;\r\n    img {\r\n      height: 5rem;\r\n    }\r\n    h1 {\r\n      color: white;\r\n      text-transform: uppercase;\r\n    }\r\n  }\r\n   form {\r\n     display: flex;\r\n     flex-direction: column;\r\n     gap: 2rem;\r\n     background-color: #00000076;\r\n     border-radius: 2rem;\r\n     padding: 3rem 5rem;\r\n   }\r\n   input {\r\n     background-color: transparent;\r\n     padding: 1rem;\r\n     border: 0.1rem solid #4e0eff;\r\n     border-radius: 0.4rem;\r\n     color: white;\r\n     width: 100%;\r\n     font-size: 1rem;\r\n     &:focus {\r\n       border: 0.1rem solid #997af0;\r\n       outline: none;\r\n     }\r\n   }\r\n   .btn {\r\n     background-color: #4e0eff;\r\n     color: white;\r\n     padding: 1rem 2rem;\r\n     border: none;\r\n     font-weight: bold;\r\n     cursor: pointer;\r\n     border-radius: 0.4rem;\r\n     font-size: 1rem;\r\n     text-transform: uppercase;\r\n     &:hover {\r\n       background-color: #4e0eff;\r\n     }\r\n   }\r\n   span {\r\n     color: white;\r\n     text-transform: uppercase;\r\n     a {\r\n       color: #4e0eff;\r\n       text-decoration: none;\r\n       font-weight: bold;\r\n     }\r\n   }\r\n`; \r\n\r\nexport default Register;"],"names":["FormContainer","styled","navigate","useNavigate","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useState","username","email","password","confirmPassword","values","setValues","useEffect","localStorage","getItem","handleChange","event","target","name","value","handleValidation","toast","length","handleSubmit","preventDefault","axios","registerRoute","data","status","msg","setItem","JSON","stringify","user","onSubmit","className","src","Logo","alt","type","placeholder","onChange","e","to"],"sourceRoot":""}