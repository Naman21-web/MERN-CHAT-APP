{"version":3,"file":"static/js/38.32c77c63.chunk.js","mappings":"iSAqIA,IAAMA,EAAgBC,EAAAA,GAAAA,IAAH,+0CAoEnB,UA/LA,WACI,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA2BC,EAAAA,EAAAA,UAAS,CAChCC,SAAU,GACVC,SAAU,KAFd,eAAOC,EAAP,KAAcC,EAAd,KAIMC,EAAe,CACnBC,SAAU,eACVC,UAAU,IACVC,cAAc,EACdC,WAAW,EACXC,MAAO,SAETC,EAAAA,EAAAA,YAAU,WACLC,aAAaC,QAAQ,gBAClBf,EAAS,IAEhB,GAAC,IACF,IAAMgB,EAAY,yCAAG,WAAOC,GAAP,qFACjBA,EAAMC,kBAEHC,IAHc,wBAMRf,EAAqBC,EAArBD,SAASD,EAAYE,EAAZF,SAND,kBAmDciB,IAAAA,KAAWC,EAAAA,GAAW,CACrClB,SAAAA,EACAC,SAAAA,IArDC,iBAuDc,KAJdkB,EAnDA,EAmDAA,MAIKC,QACNC,EAAAA,GAAAA,MAAYF,EAAKG,IAAKlB,IAEP,IAAde,EAAKC,SACNT,aAAaY,QAAQ,cAAcC,KAAKC,UAAUN,EAAKO,OACvD7B,EAAS,MA5DR,kDAgEPwB,EAAAA,GAAAA,MAAA,KAAiBjB,GAhEV,kEAAH,sDAqEZY,EAAmB,WAEvB,IAAOf,EAAqBC,EAArBD,SAASD,EAAYE,EAAZF,SAChB,MAAe,KAAZC,GACGoB,EAAAA,GAAAA,MAAY,iCAAiCjB,IACxC,GACiB,KAAlBJ,EAAS2B,SACfN,EAAAA,GAAAA,MAAY,iCAAiCjB,IACtC,EAGZ,EAEKwB,EAAe,SAACd,GACpBX,GAAU,kBAAID,GAAL,cAAaY,EAAMe,OAAOC,KAAOhB,EAAMe,OAAOE,QACxD,EACC,OACE,iCACI,SAACpC,EAAD,WACI,kBAAMqC,SAAU,SAAClB,GAAD,OAASD,EAAaC,EAAtB,EAAhB,WACI,iBAAKmB,UAAU,QAAf,WACI,gBAAKC,IAAKC,EAAAA,EAAMC,IAAI,UACpB,uCAEJ,kBAAOC,KAAK,OAAOC,YAAY,WAAWR,KAAK,WAAWS,SAAU,SAACC,GAAD,OAAKZ,EAAaY,EAAlB,EAAsBC,IAAI,OAC9F,kBAAOJ,KAAK,WAAWC,YAAY,WAAWR,KAAK,WAAWS,SAAU,SAACC,GAAD,OAAKZ,EAAaY,EAAlB,KACxE,mBAAQH,KAAK,SAASJ,UAAU,MAAhC,oBACA,SAAC,IAAD,KACA,2CAAiB,SAAC,KAAD,CAAMS,GAAG,YAAT,+BAGzB,SAAC,KAAD,MAGX,C","sources":["pages/Login.jsx"],"sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport styled from \"styled-components\";\r\nimport Logo from \"../assets/logo.svg\"\r\nimport {ToastContainer,toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { loginRoute } from '../utils/APIRoutes';\r\nimport SocialLoginButtons from '../components/SocialLoginButtons';\r\n\r\nfunction Login(){\r\n    const navigate = useNavigate();\r\n    const [values,setValues] = useState({\r\n        username: \"\",//setting initial state to be empty string\r\n        password: \"\",\r\n    })\r\n    const toastOptions = {\r\n      position: \"bottom-right\",\r\n      autoClose:8000,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      theme: 'dark',\r\n    }\r\n    useEffect(()=> {\r\n      if(localStorage.getItem('snappy-user')){//If user already logged-in before\r\n            navigate('/')\r\n      }\r\n    },[]);\r\n    const handleSubmit = async (event)=>{\r\n        event.preventDefault();\r\n        //if username and password correct\r\n        if(handleValidation()){\r\n          //get password and username from values and store it in password and username variables\r\n          //destructuring password and username\r\n          const {password,username} = values;\r\n            try{\r\n              //post the data{username and password } in login route\r\n              //get the result of post method in {data} we have to use {}  beacause\r\n              //we want to destructure the data from post method responds as it contain various responded variables\r\n              //we get following responds after using post methods\r\n\r\n              /*{\r\n                // `data` is the response that was provided by the server\r\n                data: {},\r\n              \r\n                // `status` is the HTTP status code from the server response\r\n                status: 200,\r\n              \r\n                // `statusText` is the HTTP status message from the server response\r\n                // As of HTTP/2 status text is blank or unsupported.\r\n                // (HTTP/2 RFC: https://www.rfc-editor.org/rfc/rfc7540#section-8.1.2.4)\r\n                statusText: 'OK',\r\n              \r\n                // `headers` the HTTP headers that the server responded with\r\n                // All header names are lower cased and can be accessed using the bracket notation.\r\n                // Example: `response.headers['content-type']`\r\n                headers: {},\r\n              \r\n                // `config` is the config that was provided to `axios` for the request\r\n                config: {},\r\n              \r\n                // `request` is the request that generated this response\r\n                // It is the last ClientRequest instance in node.js (in redirects)\r\n                // and an XMLHttpRequest instance in the browser\r\n                request: {}\r\n              }*/\r\n\r\n              //data contains the response provided in the backend in loginRoute\r\n              //We have returned 2 feilds in the  backend which we get here in data field in frontend\r\n              //those 2 fields are \"msg\" and \"status\" when incorrect username or password is gven\r\n              //those 2 fields are \"user\" and \"status\" when correct username or password is gven\r\n              //data.status provide status i.e., true or false\r\n              //So we have used data.msg in case of false status(incorrect username or password)\r\n              //Ex- res.json({msg:\"Incorrect Username or password\", status:false}) returning this in backend\r\n              //so data.msg = \"Incorrect Username or password\" & data.status=false;\r\n\r\n              //And we have used data.user in case of status true(correct username and password)\r\n              //Ex- res.json({status:true,user});\r\n              //user is the datails of user i.e., usrname and password and other details\r\n                  const {data} = await axios.post(loginRoute,{\r\n                        username,\r\n                        password,\r\n                      });\r\n                      if(data.status===false){\r\n                        toast.error(data.msg, toastOptions);\r\n                      }\r\n                      if(data.status===true){\r\n                        localStorage.setItem('snappy-user',JSON.stringify(data.user))\r\n                        navigate(\"/\");\r\n                      }\r\n            }\r\n            catch(err){\r\n                  toast.error(err, toastOptions);\r\n            }\r\n        };\r\n    };\r\n    \r\n    const handleValidation = ()=>{\r\n      //destructure password and username from values and store it in password and username variables\r\n      const {password,username} = values;\r\n      if(password ===\"\"){\r\n            toast.error(\"Email and Password is required\",toastOptions);\r\n          return false;\r\n      } else if(username.length===\"\"){\r\n          toast.error(\"Email and Password is required\",toastOptions);\r\n          return false;\r\n      } \r\n      return true;\r\n    };\r\n\r\n    const handleChange = (event) =>{\r\n      setValues({...values,[event.target.name]: event.target.value});\r\n    }\r\n      return (\r\n        <>\r\n            <FormContainer>\r\n                <form onSubmit={(event)=>handleSubmit(event)}>\r\n                    <div className=\"brand\">\r\n                        <img src={Logo} alt=\"Logo\" />\r\n                        <h1>snappy</h1>\r\n                    </div>\r\n                    <input type=\"text\" placeholder='Username' name=\"username\" onChange={(e)=>handleChange(e)} min=\"3\" />\r\n                    <input type=\"password\" placeholder='Password' name=\"password\" onChange={(e)=>handleChange(e)}  />\r\n                    <button type='submit' className='btn'>Login</button>\r\n                    <SocialLoginButtons />\r\n                    <span>New User ? <Link to=\"/register\">Register</Link></span>\r\n                </form>\r\n            </FormContainer>\r\n            <ToastContainer />\r\n        </>\r\n      )\r\n}\r\n\r\nconst FormContainer = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  background-color: #131324;\r\n  .brand {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    justify-content: center;\r\n    img {\r\n      height: 5rem;\r\n    }\r\n    h1 {\r\n      color: white;\r\n      text-transform: uppercase;\r\n    }\r\n  }\r\n   form {\r\n     display: flex;\r\n     flex-direction: column;\r\n     gap: 2rem;\r\n     background-color: #00000076;\r\n     border-radius: 2rem;\r\n     padding: 3rem 5rem;\r\n   }\r\n   input {\r\n     background-color: transparent;\r\n     padding: 1rem;\r\n     border: 0.1rem solid #4e0eff;\r\n     border-radius: 0.4rem;\r\n     color: white;\r\n     width: 100%;\r\n     font-size: 1rem;\r\n     &:focus {\r\n       border: 0.1rem solid #997af0;\r\n       outline: none;\r\n     }\r\n   }\r\n   .btn {\r\n     background-color: #4e0eff;\r\n     color: white;\r\n     padding: 1rem 2rem;\r\n     border: none;\r\n     font-weight: bold;\r\n     cursor: pointer;\r\n     border-radius: 0.4rem;\r\n     font-size: 1rem;\r\n     text-transform: uppercase;\r\n     &:hover {\r\n       background-color: #4e0eff;\r\n     }\r\n   }\r\n   span {\r\n     color: white;\r\n     text-transform: uppercase;\r\n     a {\r\n       color: #4e0eff;\r\n       text-decoration: none;\r\n       font-weight: bold;\r\n     }\r\n   }\r\n`; \r\n\r\nexport default Login;"],"names":["FormContainer","styled","navigate","useNavigate","useState","username","password","values","setValues","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","localStorage","getItem","handleSubmit","event","preventDefault","handleValidation","axios","loginRoute","data","status","toast","msg","setItem","JSON","stringify","user","length","handleChange","target","name","value","onSubmit","className","src","Logo","alt","type","placeholder","onChange","e","min","to"],"sourceRoot":""}